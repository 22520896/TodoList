package com.example.todolist.alarm

import android.annotation.SuppressLint
import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.media.RingtoneManager
import android.net.Uri
import android.os.Build
import android.preference.PreferenceManager
import android.util.Log
import android.widget.Toast
import androidx.core.app.NotificationCompat
import com.example.todolist.FocusActivity
import com.example.todolist.MainActivity
import com.example.todolist.R

class ReminderReceiver : BroadcastReceiver() {

    @Suppress("MissingPermission")
    override fun onReceive(context: Context, intent: Intent) {

        /* ==== 1. L·∫•y d·ªØ li·ªáu ==== */
        val todoId          = intent.getLongExtra("todoId", -1L)
        val title           = intent.getStringExtra("title") ?: "Nh·∫Øc nh·ªü"
        val dateStr         = intent.getStringExtra("date") ?: ""
        val startTimeStr    = intent.getStringExtra("start_time") ?: ""
        val endTimeStr      = intent.getStringExtra("end_time") ?: ""
        val focusEnabled    = intent.getBooleanExtra("isFocusEnabled", false)

        /* ==== 2. Chu√¥ng ng∆∞·ªùi d√πng ch·ªçn ==== */
        val prefs       = context.getSharedPreferences("user_settings", Context.MODE_PRIVATE)
        val ringtoneUri = prefs.getString("ringtone_uri", null)?.let { Uri.parse(it) }

        /* ==== 3. Intent m·ªü Activity (Focus ho·∫∑c Main) ==== */
        val openIntent = Intent(
            context,
            if (focusEnabled && todoId != -1L) FocusActivity::class.java else MainActivity::class.java
        ).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
            putExtra("todoId", todoId)
        }

        /* N·∫øu l√† Focus ‚Äì> m·ªü ngay  (Samsung¬†14: cho ph√©p v√¨ app ƒëang nh·∫≠n **alarm** cao‚Äëƒë·ªô ∆∞u¬†ti√™n) */
        if (focusEnabled && todoId != -1L) context.startActivity(openIntent)

        val openPending = PendingIntent.getActivity(
            context,
            todoId.toInt(),
            openIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        /* ==== 4. K√™nh th√¥ng b√°o ==== */
        val channelId = "todo_reminder_channel"
        val nm        = context.getSystemService(NotificationManager::class.java)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O &&
            nm.getNotificationChannel(channelId) == null
        ) {
            nm.createNotificationChannel(
                NotificationChannel(
                    channelId,
                    "Nh·∫Øc nh·ªü Todo",
                    NotificationManager.IMPORTANCE_HIGH
                ).apply {
                    enableVibration(true)
                    lockscreenVisibility = Notification.VISIBILITY_PUBLIC
                }
            )
        }

        val bigText = "$title\n$dateStr ‚Ä¢ $startTimeStr ‚Üí $endTimeStr"

        /* ==== 5. Full‚Äëscreen notification ƒë·ªÉ b·∫£o ƒë·∫£m hi·ªÉn¬†th·ªã khi m√†n h√¨nh kho√° ==== */
        val notif = NotificationCompat.Builder(context, channelId)
            .setSmallIcon(R.drawable.ic_calendar)
            .setContentTitle("üîî Nh·∫Øc nh·ªü nhi·ªám v·ª•")
            .setContentText(bigText)
            .setStyle(NotificationCompat.BigTextStyle().bigText(bigText))
            .setContentIntent(openPending)
            .setAutoCancel(true)
            .setSound(null)          // t·∫Øt ‚Äúbeep‚Äù m·∫∑c¬†ƒë·ªãnh
            .setDefaults(0)
            .setPriority(NotificationCompat.PRIORITY_MAX)
            .setFullScreenIntent(openPending, /*highPriority =*/ true)   // <-- quan¬†tr·ªçng
            .build()

        nm.notify(todoId.toInt(), notif)

        /* ==== 6. Ph√°t chu√¥ng ng∆∞·ªùi d√πng ch·ªçn ==== */
        RingtoneManager.getRingtone(context, ringtoneUri)?.play()
    }
}


//class ReminderReceiver : BroadcastReceiver() {
//    override fun onReceive(context: Context, intent: Intent) {
//        val title = intent.getStringExtra("title") ?: "Nh·∫Øc nh·ªü"
//        val todoId = intent.getLongExtra("todoId", -1L)
//        val dateStr = intent.getStringExtra("date") ?: ""
//        val startTimeStr = intent.getStringExtra("start_time") ?: ""
//        val endTimeStr = intent.getStringExtra("end_time") ?: ""
//        val isFocusEnabled = intent.getBooleanExtra("isFocusEnabled", false)
//
//        val prefs = context.getSharedPreferences("user_settings", Context.MODE_PRIVATE)
//        val ringtoneUriStr = prefs.getString("ringtone_uri", null)
//        val ringtoneUri = ringtoneUriStr?.let { Uri.parse(it) }
//
//        val notificationManager =
//            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
//        val channelId = "todo_reminder_channel"
//
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
//            val channel = NotificationChannel(
//                channelId,
//                "Nh·∫Øc nh·ªü Todo",
//                NotificationManager.IMPORTANCE_HIGH
//            )
//            notificationManager.createNotificationChannel(channel)
//        }
//
//        val fullContent = "$title\n$dateStr | $startTimeStr ‚Üí $endTimeStr"
//
//        val openIntent = Intent(context, if (isFocusEnabled && todoId != -1L) FocusActivity::class.java else MainActivity::class.java).apply {
//            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
//            putExtra("todoId", todoId)
//        }
//
//        // üëâ Start ngay l·∫≠p t·ª©c n·∫øu focus ƒë∆∞·ª£c b·∫≠t
//        if (isFocusEnabled && todoId != -1L) {
//            context.startActivity(openIntent)
//        }
//
//        val pendingIntent = PendingIntent.getActivity(
//            context,
//            todoId.toInt(),
//            openIntent,
//            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
//        )
//
//        val notification = NotificationCompat.Builder(context, channelId)
//            .setContentTitle("üîî Nh·∫Øc nh·ªü nhi·ªám v·ª•")
//            .setContentText(fullContent)
//            .setStyle(NotificationCompat.BigTextStyle().bigText(fullContent))
//            .setSmallIcon(R.drawable.ic_calendar)
//            .setContentIntent(pendingIntent)
//            .setAutoCancel(true)
//            .setSound(null)
//            .setDefaults(0)
//            .build()
//
//        notificationManager.notify(todoId.toInt(), notification)
//
//        // üîä Ph√°t chu√¥ng
//        RingtoneManager.getRingtone(context, ringtoneUri)?.play()
//    }
//}


class EventReminderReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        val title = intent.getStringExtra("title") ?: "Nh·∫Øc nh·ªü s·ª± ki·ªán"
        val eventId = intent.getLongExtra("eventId", -1L)
        val startDateStr = intent.getStringExtra("startDate") ?: ""
        val startTimeStr = intent.getStringExtra("startTime") ?: ""
        val endDateStr = intent.getStringExtra("endDate") ?: ""
        val endTimeStr = intent.getStringExtra("endTime") ?: ""

        val prefs = context.getSharedPreferences("user_settings", Context.MODE_PRIVATE)
        val ringtoneUriStr = prefs.getString("ringtone_uri", null)
        val ringtoneUri = ringtoneUriStr?.let { Uri.parse(it) }

        val notificationManager =
            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        val channelId = "event_reminder_channel"

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                channelId,
                "Nh·∫Øc nh·ªü S·ª± ki·ªán",
                NotificationManager.IMPORTANCE_HIGH
            )
            notificationManager.createNotificationChannel(channel)
        }

        val fullContent = "$startTimeStr ‚Äì $startDateStr ‚Üí $endTimeStr ‚Äì $endDateStr"

        val openIntent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
            putExtra("eventId", eventId)
        }

        val pendingIntent = PendingIntent.getActivity(
            context,
            eventId.toInt(),
            openIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val notification = NotificationCompat.Builder(context, channelId)
            .setContentTitle("üìÖ $title")
            .setContentText(fullContent)
            .setStyle(NotificationCompat.BigTextStyle().bigText(fullContent))
            .setSmallIcon(R.drawable.ic_calendar)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setSound(null)
            .setDefaults(0)
            .build()

        notificationManager.notify(eventId.toInt(), notification)

        // üîî Ph√°t chu√¥ng
        RingtoneManager.getRingtone(context, ringtoneUri)?.play()
    }
}